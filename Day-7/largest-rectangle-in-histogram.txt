class Solution {
public:
    vector<int> prev_shorter(vector<int>&heights, int n){
        stack<int> s;
        s.push(-1);

        vector<int> vec(n);

        for(int i=0;i<n;i++){
            int curr=heights[i];
            while(s.top()!=-1 && curr<=heights[s.top()]){
                s.pop();
            }
            vec[i]=s.top();
            s.push(i);
        }
        return vec;
    }

    vector<int> next_shorter(vector<int>&heights, int n){
        stack<int> s;
        s.push(-1);

        vector<int> vec(n);

        for(int i=n-1;i>=0;i--){
            int curr=heights[i];
            while(s.top()!=-1 && curr<=heights[s.top()]){
                s.pop();
            }
            vec[i]=s.top();
            s.push(i);
        }
        return vec;
    }


    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        vector<int> prev=prev_shorter(heights,n);
        vector<int> next=next_shorter(heights,n);

        int ans=0;

        for(int i=0;i<n;i++){
            // if(prev[i]==-1) prev[i]=i-1;
            if(next[i]==-1) next[i]=n;

            ans=max(ans,heights[i]*((next[i]-prev[i])-1));
        }
        return ans;
    }
};